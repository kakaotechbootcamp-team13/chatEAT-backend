name: CI/CD Pipeline   # workflow의 이름

on:
  push:
    branches:
      - dev  # dev 브랜치에 푸시될 때 워크플로가 트리거

jobs:
  build: # 작업의 이름
    runs-on: ubuntu-latest              # 실행할 환경 설정

    steps: # 단계 정의
      - name: Check out code              # 코드 체크아웃 단계
        uses: actions/checkout@v2         # GitHub 액션을 사용하여 코드를 가져옴

      - name: Set up JDK                  # JDK 설정
        uses: actions/setup-java@v2       # JDK 설치 액션
        with:
          java-version: '17'              # 설치할 JDK 버전
          distribution: 'adopt'           # JDK 배포판 설정

      - name: Grant execute permission for Gradle         # Gradle 권한 부여
        run: chmod +x gradlew                             # gradlew 파일에 실행 권한 추가

      - name: Build with Gradle           # Gradle 빌드 수행
        run: ./gradlew build -x test      # Gradle 빌드 명령어 수행

      - name: Build Docker Image          # Docker 이미지 빌드
        run: |
          docker build -t ${{ secrets.IMAGE_NAME }} --build-arg FASTAPI_URL=http://localhost:8081/fastapi . # Docker 이미지 생성

      - name: Log in to Docker Hub        # Docker Hub 로그인
        uses: docker/login-action@v1      # Docker Hub 로그인 액션 사용
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker Image to Docker Hub     # Docker 이미지 푸시
        run: |
          docker push ${{ secrets.IMAGE_NAME }} # Docker Hub에 이미지 푸시

      - name: Deploy to Backend EC2 through Bastion Host      # 바스천 호스트를 통한 백엔드 EC2 배포
        env:
          BASTION_HOST: ${{ secrets.BASTION_HOST }}    # 바스천 호스트 주소
          TARGET_HOST: ${{ secrets.EC2_HOST }}         # 프라이빗 서브넷의 EC2 인스턴스 주소
          USER: ${{ secrets.EC2_USER }}                 # EC2 사용자 이름
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}           # SSH 비공개 키
          IMAGE_NAME: ${{ secrets.IMAGE_NAME }}         # Docker 이미지 이름을 Secrets에서 가져옴
        run: |
          echo "$SSH_KEY" | tr -d '\r' > chat-eat.pem   # SSH 키 파일 생성
          chmod 600 chat-eat.pem                         # 키 파일 권한 설정

          # 바스천 호스트를 통해 프라이빗 EC2 인스턴스에 접근
          ssh -o StrictHostKeyChecking=no -i chat-eat.pem $USER@$BASTION_HOST << 'EOF'
            # 프라이빗 서브넷의 EC2 인스턴스에 대한 SSH 접근
            ssh -o StrictHostKeyChecking=no -i chat-eat.pem $USER@${{ secrets.EC2_HOST }} << 'INNER_EOF'
              # 도커 허브에서 새로운 Docker 이미지 가져오기
              echo "Pulling image: ${{ secrets.IMAGE_NAME }}"
              docker pull ${{ secrets.IMAGE_NAME }}
        
              # 기존 컨테이너가 실행 중인지 확인 및 제거
              if [ $(docker ps -a -q -f name=chateat-container) ]; then
                echo "Stopping and removing existing container"
                docker stop chateat-container || true
                docker rm chateat-container || true
              fi
        
              # 새로운 컨테이너 실행
              echo "Starting new container from image: ${{ secrets.IMAGE_NAME }}"
              docker run -d --name chateat-container -p 8080:8080 ${{ secrets.IMAGE_NAME }}
          INNER_EOF
          EOF

          # SSH 키 파일 삭제
          rm chat-eat.pem
