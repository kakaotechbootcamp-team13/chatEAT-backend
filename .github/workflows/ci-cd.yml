name: CI/CD Pipeline    # workflow의 이름

on:
  push:
    branches:
      - dev  # dev 브랜치에 푸시될 때 워크플로가 트리거

jobs:
  build: # 작업의 이름
    runs-on: ubuntu-latest              # 실행할 환경 설정

    steps: # 단계 정의
      - name: Check out code              # 코드 체크아웃 단계
        uses: actions/checkout@v2         # GitHub 액션을 사용하여 코드를 가져옴

      - name: Set up JDK                  # JDK 설정
        uses: actions/setup-java@v2       # JDK 설치 액션
        with:
          java-version: '17'              # 설치할 JDK 버전
          distribution: 'adopt'           # JDK 배포판 설정

      - name: Grant execute permission for Gradle         # Gradle 권한 부여
        run: chmod +x gradlew                             # gradlew 파일에 실행 권한 추가

      - name: Build with Gradle           # Gradle 빌드 수행
        run: ./gradlew build -x test      # Gradle 빌드 명령어 수행

      - name: Build Docker Image          # Docker 이미지 빌드
        run: |
          docker build -t ${{ secrets.IMAGE_NAME }} . # Docker 이미지 생성

      - name: Log in to Docker Hub        # Docker Hub 로그인
        uses: docker/login-action@v1      # Docker Hub 로그인 액션 사용
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Push Docker Image to Docker Hub     # Docker 이미지 푸시
        run: |
          docker push ${{ secrets.IMAGE_NAME }} # Docker Hub에 이미지 푸시

      - name: Deploy to EC2                               # EC2에 배포
        env:
          HOST: ${{ secrets.EC2_HOST }}               # EC2 호스트 주소
          USER: ${{ secrets.EC2_USER }}                     # EC2 사용자 이름
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}         # SSH 비공개 키
          IMAGE_NAME: ${{ secrets.IMAGE_NAME }} # Docker 이미지 이름
          BACKEND_HOST: ${{ secrets.BACKEND_HOST }}       # 백엔드 서버의 프라이빗 IP
        run: |
          echo "$PRIVATE_KEY" | tr -d '\r' > chat-eat.pem             # SSH 키 파일 생성
          chmod 600 chat-eat.pem                       # 키 파일 권한 설정
          ssh -T -o StrictHostKeyChecking=no -i chat-eat.pem ${{ secrets.EC2_USER }}@$HOST << 'EOF'
            ssh -T -o StrictHostKeyChecking=no -i chat-eat.pem -L 8080:${{ secrets.BACKEND_HOST }}:8080 ${{ secrets.EC2_USER }}@${{ secrets.BACKEND_HOST }} << 'EOC'
              echo "Pulling image: ${{ secrets.IMAGE_NAME }}"
              docker pull ${{ secrets.IMAGE_NAME }}
              if [ $(docker ps -q -f name=chateat-container) ]; then
                echo "Stopping and removing existing container"
                docker stop chateat-container
                docker rm chateat-container
              fi
              echo "Starting new container from image: ${{ secrets.IMAGE_NAME }}"
              docker run -d --name chateat-container -p 8080:8080 ${{ secrets.IMAGE_NAME }}
            EOC
          EOF
          rm chat-eat.pem
